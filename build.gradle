/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.4.2/samples
 */

plugins {
    id 'java'
    id 'application'
}

application { 
  mainClass='JavaExample'
}

test {
  // Discover and execute JUnit4-based tests
  // useJUnit()

  // // Discover and execute TestNG-based tests
  // useTestNG()

  // // Discover and execute JUnit Platform-based tests
  useJUnitPlatform()

  // // set a system property for the test JVM(s)
  // systemProperty 'some.prop', 'value'

  // // explicitly include or exclude tests
  // include 'org/foo/**'
  // exclude 'org/boo/**'

  // // show standard out and standard error of the test JVM(s) on the console
  // testLogging.showStandardStreams = true

  // // set heap size for the test JVM(s)
  // minHeapSize = "128m"
  // maxHeapSize = "512m"

  // // set JVM arguments for the test JVM(s)
  // jvmArgs '-XX:MaxPermSize=256m'

  // // listen to events in the test execution lifecycle
  // beforeTest { descriptor ->
  //    logger.lifecycle("Running test: " + descriptor)
  // }

  // Fail the 'test' task on the first test failure
  failFast = true
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

repositories {
  mavenCentral ()
}

// Test-Logging
project.test {
    def outputCache = new LinkedList<String>()
    
    beforeTest { TestDescriptor td -> outputCache.clear() }    // clear everything right before the test starts
    
    onOutput { TestDescriptor td, TestOutputEvent toe ->       // when output is coming put it in the cache
        outputCache.add(toe.getMessage())
        while (outputCache.size() > 1000) outputCache.remove() // if we have more than 1000 lines -> drop first
    }

    /** after test -> decide what to print */
    afterTest { TestDescriptor td, TestResult tr ->
        if (tr.resultType == TestResult.ResultType.FAILURE && outputCache.size() > 0) {
            println()
            println(" Output of ${td.className}.${td.name}:")
            outputCache.each { print(" > $it") }
        }
    }
}

tasks.withType(Test) {
    reports.html.enabled = false
    testLogging {
        events /*'started',*/ 'passed', 'failed'
        exceptionFormat = 'full'
        afterSuite { desc, result -> if (!desc.parent) println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)" }
    }
}
